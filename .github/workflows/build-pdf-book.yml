name: Build PDF Book
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-pdf:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          
      - name: Generate SUMMARY.md
        run: python scripts/generate_summary.py
      
      # Cache Rust dependencies to speed up the build
      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      # Use pre-built mdBook binary instead of installing from source
      - name: Install mdBook from GitHub releases
        run: |
          mkdir -p $HOME/.local/bin
          curl -sSL https://github.com/rust-lang/mdBook/releases/download/v0.4.34/mdbook-v0.4.34-x86_64-unknown-linux-gnu.tar.gz | tar -xz --directory=$HOME/.local/bin
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      
      # Install the latest version of mdbook-pdf
      - name: Install mdbook-pdf
        run: |
          cargo install mdbook-pdf
      
      # Install system dependencies with caching
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends chromium-browser
      
      # Fix for mdbook-pdf deserialization issue - ensure proper book.toml setup
      - name: Validate book configuration
        run: |
          # Ensure book.toml has proper format
          grep -q '\[book\]' book.toml || echo -e '[book]\nsrc = "."' >> book.toml
          # Create minimal SUMMARY.md if it doesn't exist or is empty
          [ -s SUMMARY.md ] || echo "# Summary\n\n* [Introduction](README.md)" > SUMMARY.md
      
      - name: Build PDF with fallbacks
        run: |
          export RUST_BACKTRACE=1
          
          echo "Attempting direct mdbook-pdf build..."
          mdbook-pdf && echo "Direct build successful!" && exit 0
          
          echo "Direct build failed, trying alternative approach..."
          
          # First generate the book with mdbook
          mdbook build --dest-dir ./.book
          
          # Try building the PDF from the book directory
          cd ./.book
          echo "Building PDF from book directory..."
          MDBOOK_OUTPUT_DIRECTORY=../. mdbook-pdf || (
            # If that fails, try one more alternative approach
            cd ..
            echo "Attempting alternative approach with manual copy of SUMMARY.md..."
            cp SUMMARY.md ./.book/
            cd ./.book
            MDBOOK_OUTPUT_DIRECTORY=../. mdbook-pdf
          )
      
      - name: Organize PDF by Date
        run: |
          if [ -f book.pdf ]; then
            echo "PDF file found, organizing..."
            python scripts/organize_pdf.py book.pdf || echo "Warning: Could not organize PDF, continuing workflow"
          else
            echo "Warning: book.pdf not found, skipping organization step"
          fi
          mkdir -p published_pdfs
          cp -r published_pdfs ./published_pdfs || true
      
      - name: Upload PDF as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: book-pdf
          path: book.pdf
          if-no-files-found: warn
          
      - name: Upload Organized PDFs
        uses: actions/upload-artifact@v4
        with:
          name: published-pdfs
          path: published_pdfs
          if-no-files-found: warn
          
      # Using softprops/action-gh-release instead of deprecated create-release and upload-release-asset
      - name: Create Release and Upload PDF
        if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && success()
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: Book Release v${{ github.run_number }}
          files: |
            ./book.pdf
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}